import{r as i,o as d,g as u,a as e,w as n,b as a,d as s,h as c,_ as h}from"./index-BW-0fVWL.js";const b=s("strong",null,"If you are using Nuxt",-1),_=s("a",{class:"ml1",href:"/getting-started#installation-on-nuxt"},"Nuxt installation",-1),g=s("p",{class:"mt8"},`Wave UI components rely on SCSS variables that you can easily override from your SCSS file,
just like this:`,-1),m=["dark"],y=c('<span class="purple text-bold">@import </span><span class="red-light2">&#39;wave-ui/src/wave-ui/scss/_variables&#39;</span><span class="blue-grey">;</span><br><br><span class="pink">$base-font-size</span><span class="blue-grey">: </span><span class="deep-orange">14px</span><span class="blue-grey">;</span><br><span class="pink">$base-increment</span><span class="blue-grey">: </span><span class="deep-orange">5px</span><span class="blue-grey">;</span>',14),f=[y],v=s("div",{class:"title4"},"But to do so, you need to slightly modify your config.",-1),k=s("div",{class:"title4 mt4"},"1. Install the devDependencies",-1),S=s("small",{class:"text-italic grey"},"The dev dependencies are only needed for building the project. They will not ship to production.",-1),w={class:"mt3"},x=s("strong",null,"Notes:",-1),C=s("li",null,[s("span",{class:"code"},"sass-loader 11+"),a(" is not compatible with Webpack 4 or less.")],-1),$=s("span",{class:"code"},"sass",-1),I={class:"ml1",href:"https://github.com/sass/sass/issues/2565",target:"_blank"},j=s("div",{class:"title4 mt8"},[a("2. Update "),s("span",{class:"code"},"main.js")],-1),M=s("p",null,"In main.js, replace the 2 Wave UI imports with:",-1),U=s("div",{class:"title4 mt8"},"3. Create an SCSS file & import it globally",-1),W=s("li",null,[a("In your project "),s("span",{class:"code"},"src"),a(" folder, create a "),s("code",null,"_variables.scss"),a(" (usually in an "),s("span",{class:"code"},"scss"),a(`
folder), and import Wave UI's variables: `),s("code",null,"@import 'wave-ui/src/wave-ui/scss/_variables';"),a(`.
`)],-1),V={class:"mt2"},D=s("p",null,[s("strong",null,"Or if you use Vite"),a(`,
In `),s("span",{class:"code"},"vite.config.js"),a(", the import of variables is done like so, and you don't need to transpile:")],-1),N=s("br",null,null,-1),z=s("div",{class:"title4 mt8"},"Voilà !",-1),T=s("p",null,"You're all set, you can now override the SCSS variables.",-1),B=s("div",{class:"w-divider my12"},null,-1),E=["dark"],F=c('<span class="grey-light1 text-italic">// First import the Wave UI variables, then override what you want.</span><br><span class="purple text-bold">@import </span><span class="red-light2">&#39;wave-ui/src/wave-ui/scss/_variables&#39;</span><span class="blue-grey">;</span><br><br><span class="pink">$base-font-size</span><span class="blue-grey">: </span><span class="deep-orange">14px</span><span class="blue-grey">;</span><br><span class="pink">$base-increment</span><span class="blue-grey">: </span><span class="purple text-bold">round</span><span class="blue-grey">(</span><span class="pink">$base-font-size</span><span class="blue-grey mx1">/</span><span class="orange">4</span><span class="blue-grey">)</span><span class="blue-grey">;</span><br><span class="pink">$layout-padding</span><span class="blue-grey">: </span><span class="pink">$base-increment</span><span class="blue-grey mx1">*</span><span class="orange">4</span><span class="blue-grey">;</span><br><span class="pink">$border-radius</span><span class="blue-grey">: </span><span class="deep-orange">3px</span><span class="blue-grey">;</span><br><span class="pink">$border</span><span class="blue-grey">: </span><span class="deep-orange">1px solid rgba(0, 0, 0, 0.15)</span><span class="blue-grey">;</span><br><span class="pink">$drawer-max-size</span><span class="blue-grey">: </span><span class="deep-orange">380px</span><span class="blue-grey">;</span><br><span class="pink">$transition-duration</span><span class="blue-grey">: </span><span class="deep-orange">0.25s</span><span class="blue-grey">;</span><br><span class="pink">$box-shadow</span><span class="blue-grey">: </span><span class="deep-orange">0 3px 1px -2px rgba(0, 0, 0, 0.2),</span><br><span class="deep-orange">             0 2px 2px 0 rgba(0, 0, 0, 0.15),</span><br><span class="deep-orange">             0 1px 5px 0 rgba(0, 0, 0, 0.15)</span><span class="blue-grey">;</span>',57),O=[F],Y=s("p",null,"It is also possible to control Wave UI's CSS rules priorities by overriding the CSS base scope:",-1),G=["dark"],q=s("span",{class:"pink"},"$css-scope",-1),A=s("span",{class:"blue-grey mr1"},":",-1),H=s("span",{class:"red-light2"},"'.w-app'",-1),J=s("span",{class:"blue-grey"},";",-1),K=[q,A,H,J],L=s("p",null,[a("For instance if you set the scope to "),s("code",null,"html > body > div.w-app"),a(`, the default
`),s("code",null,".w-app .primary {color: #234781;}"),a(` would become
`),s("code",null,"html > body > div.w-app .primary {color: #234781;}"),a(".")],-1),P=s("p",null,[a(`You may want to use another CSS framework (like Tailwind) instead of the Wave UI's built-in CSS
layout classes.`),s("br"),a(`
This is not recommended, but it's possible to disable the CSS layout classes of Wave UI so they
don't conflict with the external library.`),s("br"),a(`
For this, follow the above steps in `),s("a",{href:"#modify-your-config"},"Modify your config"),a(`, then you
can set the `),s("code",{class:"pink"},"$use-layout-classes"),a(" variable to "),s("code",null,"false"),a(".")],-1),Q={class:"ml2",href:"https://github.com/antoniandre/wave-ui/blob/master/src/wave-ui/scss/_layout.scss",target:"_blank"};function R(t,Z){const l=i("title-link"),r=i("alert"),o=i("ssh-pre"),p=i("w-icon");return d(),u("main",null,[e(l,{class:"mt4",h1:"",slug:"customization"},{default:n(()=>[a("Customization Via SCSS (optional)")]),_:1}),e(r,{info:""},{default:n(()=>[b,a(", the steps to follow are different. Check the last paragraph of the"),_,a(".")]),_:1}),g,s("pre",{class:"ssh-pre","data-label":"SCSS",dark:t.$store.state.darkMode},f,8,m),v,e(l,{h2:""},{default:n(()=>[a("Modify your config")]),_:1}),k,e(o,{class:"mb2",language:"shell",dark:t.$store.state.darkMode},{default:n(()=>[a("npm i -D pug pug-plain-loader sass sass-loader@10")]),_:1},8,["dark"]),S,s("p",w,[x,s("ul",null,[C,s("li",null,[a("The "),$,a(" update is needed to handle the"),s("a",I,[a("new Sass division"),e(p,{class:"ml1"},{default:n(()=>[a("mdi mdi-open-in-new")]),_:1})]),a(".")])])]),j,M,e(o,{class:"mt5",language:"js",label:"main.js",dark:t.$store.state.darkMode},{default:n(()=>[a("import WaveUI from 'wave-ui/src/wave-ui'")]),_:1},8,["dark"]),U,s("ul",null,[W,s("li",V,[a("Import your SCSS variables file globally from Vue config and re-serve the app."),e(o,{class:"mt5",language:"js",label:"vue.config.js",dark:t.$store.state.darkMode},{default:n(()=>[a(`module.exports = {
  transpileDependencies: ['wave-ui'],
  css: {
    loaderOptions: {
      // \`additionalData\` was called \`prependData\` prior sass-loader 9.
      sass: { additionalData: '@import "@/scss/_variables.scss";' }
    }
  }
}
`)]),_:1},8,["dark"]),D,e(o,{language:"js",label:"vite.config.js",dark:t.$store.state.darkMode},{default:n(()=>[a(`css: {
  preprocessorOptions: {
    scss: {
      additionalData: '@import "@/scss/variables";'
    }
  }
}
`)]),_:1},8,["dark"]),e(r,{info:""},{default:n(()=>[a(`Note from the above code that since you import Wave UI source code, you need to transpile
it if you don't use ESM.`),N,a(`Vite uses ESM.
`)]),_:1})])]),z,T,B,e(l,{h2:""},{default:n(()=>[a("Basic SCSS overrides")]),_:1}),s("pre",{class:"ssh-pre","data-label":"@/scss/_variables.scss",dark:t.$store.state.darkMode},O,8,E),e(l,{h2:""},{default:n(()=>[a("Give Wave UI CSS more priority")]),_:1}),Y,s("pre",{class:"ssh-pre","data-label":"SCSS",dark:t.$store.state.darkMode},K,8,G),L,e(r,{class:"mt6 py3",success:""},{default:n(()=>[a(`This means you can control all the css rules specificity and consequently their priority!
`)]),_:1}),e(l,{h2:""},{default:n(()=>[a("Disable the CSS layout classes (not recommended)")]),_:1}),P,s("p",null,[a("You can have a look at all the classes that will not be generated in this file:"),s("a",Q,[a("layout.scss on Github"),e(p,{class:"ml1",sm:""},{default:n(()=>[a("mdi mdi-open-in-new")]),_:1})])])])}const X={},as=h(X,[["render",R]]);export{as as default};
